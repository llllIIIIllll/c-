{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"ROS2 minimun noe" : {
		"prefix": "pub"
		"body": [
			"class $1 : public rclcpp::Node"
			"{"
			"public:"
			"	$1();"
			"	~$1();"
			"private:"
  			"	rclcpp::Publisher<$2>::SharedPtr publisher_;"
			" 	rmw_qos_profile_t                pub_qos_profile_;"
			"};"
			"$1::$1 : Node(\"$1\", \"\", true)"
  			"{"
			"	pub_qos_profile_ = rmw_qos_profile_default;"
			"	pub_qos_profile_.history = RMW_QOS_POLICY_HISTORY_KEEP_LAST;"
			"	pub_qos_profile_.depth = 10;"
			"	pub_qos_profile_.reliability = RMW_QOS_POLICY_RELIABILITY_RELIABLE;"
			"	publisher_ = this->create_publisher<$2>(\"$1\", pub_qos_profile_);"
			"}"
		],
		"description": "ros2 publisher node generate"
	}

	"ROS2 minimun subcribe noe" : {
		"prefix": "sub"
		"body": [
			"class $1 : public rclcpp::Node"
			"{"
			"public:"
			"	$1();"
			"	~$1();"
			"private:"
			" 	rmw_qos_profile_t                sub_qos_profile_;"
    		"	rclcpp::Subscription<$2>::SharedPtr subscription_;"  
    		"	void topic_callback_shared(const $2::SharedPtr msg);"
			"};"
			"$1::$1()"
			"	: Node(\"$1\",\"\",true)"
			"{"
			"	sub_qos_profile_ = rmw_qos_profile_default;"
			"	sub_qos_profile_.history           = RMW_QOS_POLICY_HISTORY_KEEP_LAST;"
			"	sub_qos_profile_.depth             = 1;"
			"	sub_qos_profile_.reliability       = RMW_QOS_POLICY_RELIABILITY_BEST_EFFORT;"
			"	subscription_ = this->create_subscription<$2>("
			"	\"tld_kcf_tracker/target_tracked\", std::bind(&$1::topic_callback_shared, this, std::placeholders::_1),sub_qos_profile_);"
			"}"
			"$1::~$1() {}"
			"void $1::topic_callback_shared(const $2::SharedPtr msg)"
			"{"
			"}"
		],
		"description": "ros2 sub node generate"
	}

	"Ros2 main Sleep " : {
		"prefix": "main"
		"body": [

		"int main(int argc, char * argv[])"
		"{"
    	"	// Force flush of the stdout buffer."
    	"	setvbuf(stdout, NULL, _IONBF, BUFSIZ);"
    	"	rclcpp::init(argc, argv);"
    	"	rclcpp::spin(std::make_shared<$1>());"
    	"	rclcpp::shutdown();"
    	"	return 0;"
		"}"
		],
		"description": "ros2 main"
	}

	"Cpp Sleep " : {
		"prefix": "sleep"
		"body": [
			"std::this_thread::sleep_for(std::chrono::nanoseconds(1000));"
		],
		"description": "sleep for std::thread"
	}
}